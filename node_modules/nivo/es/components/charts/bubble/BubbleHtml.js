var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * This file is part of the nivo project.
 *
 * Copyright 2016-present, RaphaÃ«l Benitte.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import React from 'react';
import { TransitionMotion, spring } from 'react-motion';
import pick from 'lodash/pick';
import { colorMotionSpring, getInterpolatedColor } from '../../../lib/colors';
import Container from '../Container';
import enhance from './enhance';
import { nodeWillEnter, nodeWillLeave } from './motion';
import { getNodeHandlers } from './interactivity';

var BubbleHtml = function BubbleHtml(_ref) {
    var nodes = _ref.nodes,
        nodeComponent = _ref.nodeComponent,
        margin = _ref.margin,
        outerWidth = _ref.outerWidth,
        outerHeight = _ref.outerHeight,
        theme = _ref.theme,
        borderWidth = _ref.borderWidth,
        getBorderColor = _ref.getBorderColor,
        getLabelTextColor = _ref.getLabelTextColor,
        animate = _ref.animate,
        motionStiffness = _ref.motionStiffness,
        motionDamping = _ref.motionDamping,
        isInteractive = _ref.isInteractive,
        onClick = _ref.onClick,
        isZoomable = _ref.isZoomable,
        zoomToNode = _ref.zoomToNode;

    var springConfig = {
        stiffness: motionStiffness,
        damping: motionDamping
    };

    var getHandlers = function getHandlers(node, showTooltip, hideTooltip) {
        return getNodeHandlers(node, {
            isInteractive: isInteractive,
            onClick: onClick,
            showTooltip: showTooltip,
            hideTooltip: hideTooltip,
            isZoomable: isZoomable,
            zoomToNode: zoomToNode,
            theme: theme
        });
    };

    return React.createElement(
        Container,
        { isInteractive: isInteractive, theme: theme },
        function (_ref2) {
            var showTooltip = _ref2.showTooltip,
                hideTooltip = _ref2.hideTooltip;
            return React.createElement(
                'div',
                {
                    style: {
                        position: 'relative',
                        width: outerWidth,
                        height: outerHeight
                    }
                },
                !animate && React.createElement(
                    'div',
                    { style: { position: 'absolute', top: margin.top, left: margin.left } },
                    nodes.map(function (node) {
                        return React.createElement(nodeComponent, {
                            key: node.path,
                            node: node,
                            style: _extends({}, pick(node, ['scale', 'r', 'x', 'y', 'color']), {
                                borderWidth: borderWidth,
                                borderColor: getBorderColor(node),
                                labelTextColor: getLabelTextColor(node)
                            }),
                            handlers: getHandlers(node, showTooltip, hideTooltip)
                        });
                    })
                ),
                animate && React.createElement(
                    TransitionMotion,
                    {
                        willEnter: nodeWillEnter,
                        willLeave: nodeWillLeave(springConfig),
                        styles: nodes.map(function (node) {
                            return {
                                key: node.path,
                                data: node,
                                style: _extends({
                                    scale: spring(1, springConfig),
                                    r: spring(node.r, springConfig),
                                    x: spring(node.x, springConfig),
                                    y: spring(node.y, springConfig),
                                    opacity: spring(1, springConfig)
                                }, colorMotionSpring(node.color, springConfig))
                            };
                        })
                    },
                    function (interpolatedStyles) {
                        return React.createElement(
                            'div',
                            {
                                style: {
                                    position: 'absolute',
                                    top: margin.top,
                                    left: margin.left
                                }
                            },
                            interpolatedStyles.map(function (_ref3) {
                                var style = _ref3.style,
                                    node = _ref3.data;

                                style.color = getInterpolatedColor(style);

                                return React.createElement(nodeComponent, {
                                    key: node.path,
                                    node: node,
                                    style: _extends({}, style, {
                                        borderWidth: borderWidth,
                                        borderColor: getBorderColor(style),
                                        labelTextColor: getLabelTextColor(style)
                                    }),
                                    handlers: getHandlers(node, showTooltip, hideTooltip)
                                });
                            })
                        );
                    }
                )
            );
        }
    );
};

BubbleHtml.displayName = 'BubbleHtml';

export default enhance(BubbleHtml);
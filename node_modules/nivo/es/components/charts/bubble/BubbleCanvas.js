function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * This file is part of the nivo project.
 *
 * Copyright 2016-present, Raphaël Benitte.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import React, { Component } from 'react';
import Container from '../Container';
import enhance from './enhance';

var BubbleCanvas = function (_Component) {
    _inherits(BubbleCanvas, _Component);

    function BubbleCanvas() {
        _classCallCheck(this, BubbleCanvas);

        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
    }

    BubbleCanvas.prototype.componentDidMount = function componentDidMount() {
        this.ctx = this.surface.getContext('2d');
        this.draw(this.props);
    };

    BubbleCanvas.prototype.componentDidUpdate = function componentDidUpdate() {
        this.ctx = this.surface.getContext('2d');
        this.draw(this.props);
    };

    BubbleCanvas.prototype.draw = function draw(props) {
        var _this2 = this;

        var nodes = props.nodes,
            pixelRatio = props.pixelRatio,
            margin = props.margin,
            outerWidth = props.outerWidth,
            outerHeight = props.outerHeight,
            borderWidth = props.borderWidth,
            getBorderColor = props.getBorderColor,
            enableLabel = props.enableLabel,
            getLabel = props.getLabel,
            labelSkipRadius = props.labelSkipRadius,
            getLabelTextColor = props.getLabelTextColor;


        this.surface.width = outerWidth * pixelRatio;
        this.surface.height = outerHeight * pixelRatio;

        this.ctx.scale(pixelRatio, pixelRatio);
        this.ctx.clearRect(0, 0, outerWidth, outerHeight);
        this.ctx.translate(margin.left, margin.top);

        /*
        Could be used to compute metaballs,
        grouping nodes by depth + common parent
        using marching squares, but it really is a bonus feature…
         const maxDepth = _.maxBy(nodes, 'depth').depth
        const nodesByDepth = _.range(maxDepth + 1).map(depth =>
            _.values(
                _.groupBy(nodes.filter(({ depth: nodeDepth }) => nodeDepth === depth), 'parent.id')
            )
        )
        nodesByDepth.forEach(layer => {
            layer.forEach(node => {
                console.log(node)
            })
        })
        */

        nodes.forEach(function (node) {
            _this2.ctx.save();

            if (borderWidth > 0) {
                _this2.ctx.strokeStyle = getBorderColor(node);
                _this2.ctx.lineWidth = borderWidth;
            }

            _this2.ctx.beginPath();
            _this2.ctx.arc(node.x, node.y, node.r, 0, 2 * Math.PI);
            _this2.ctx.fillStyle = node.color;
            _this2.ctx.fill();

            if (borderWidth > 0) {
                _this2.ctx.stroke();
            }
        });

        if (enableLabel) {
            this.ctx.textAlign = 'center';
            this.ctx.textBaseline = 'middle';

            // draw labels on top
            nodes.filter(function (_ref) {
                var r = _ref.r;
                return r > labelSkipRadius;
            }).forEach(function (node) {
                var label = getLabel(node);
                var labelTextColor = getLabelTextColor(node);

                _this2.ctx.fillStyle = labelTextColor;
                _this2.ctx.fillText(label, node.x, node.y);
            });
        }
    };

    BubbleCanvas.prototype.render = function render() {
        var _this3 = this;

        var _props = this.props,
            outerWidth = _props.outerWidth,
            outerHeight = _props.outerHeight,
            pixelRatio = _props.pixelRatio,
            isInteractive = _props.isInteractive,
            theme = _props.theme;


        return React.createElement(
            Container,
            { isInteractive: isInteractive, theme: theme },
            function (_ref2) {
                var showTooltip = _ref2.showTooltip,
                    hideTooltip = _ref2.hideTooltip;
                return React.createElement('canvas', {
                    ref: function ref(surface) {
                        _this3.surface = surface;
                    },
                    width: outerWidth * pixelRatio,
                    height: outerHeight * pixelRatio,
                    style: {
                        width: outerWidth,
                        height: outerHeight
                    }
                });
            }
        );
    };

    return BubbleCanvas;
}(Component);

BubbleCanvas.displayName = 'BubbleCanvas';

export default enhance(BubbleCanvas);
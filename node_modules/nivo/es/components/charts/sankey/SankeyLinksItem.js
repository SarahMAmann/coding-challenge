/*
 * This file is part of the nivo project.
 *
 * Copyright 2016-present, RaphaÃ«l Benitte.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import React from 'react';
import PropTypes from 'prop-types';
import compose from 'recompose/compose';
import withState from 'recompose/withState';
import withPropsOnChange from 'recompose/withPropsOnChange';
import withHandlers from 'recompose/withHandlers';
import pure from 'recompose/pure';
import BasicTooltip from '../../tooltip/BasicTooltip';
import Chip from '../../tooltip/Chip';

var tooltipStyles = {
    container: {
        display: 'flex',
        alignItems: 'center'
    },
    sourceChip: {
        marginRight: 7
    },
    targetChip: {
        marginLeft: 7,
        marginRight: 7
    }
};

var TooltipContent = function TooltipContent(_ref) {
    var link = _ref.link,
        format = _ref.format;
    return React.createElement(
        'span',
        { style: tooltipStyles.container },
        React.createElement(Chip, { color: link.source.color, style: tooltipStyles.sourceChip }),
        React.createElement(
            'strong',
            null,
            link.source.label
        ),
        '\xA0>\xA0',
        React.createElement(
            'strong',
            null,
            link.target.label
        ),
        React.createElement(Chip, { color: link.target.color, style: tooltipStyles.targetChip }),
        React.createElement(
            'strong',
            null,
            format ? format(link.value) : link.value
        )
    );
};

var SankeyLinksItem = function SankeyLinksItem(_ref2) {
    var link = _ref2.link,
        path = _ref2.path,
        width = _ref2.width,
        color = _ref2.color,
        opacity = _ref2.opacity,
        contract = _ref2.contract,
        handleMouseEnter = _ref2.handleMouseEnter,
        handleMouseMove = _ref2.handleMouseMove,
        handleMouseLeave = _ref2.handleMouseLeave,
        onClick = _ref2.onClick;
    return React.createElement('path', {
        fill: 'none',
        d: path,
        strokeWidth: Math.max(1, width - contract * 2),
        stroke: color,
        strokeOpacity: opacity,
        onMouseEnter: handleMouseEnter,
        onMouseMove: handleMouseMove,
        onMouseLeave: handleMouseLeave,
        onClick: onClick
    });
};

SankeyLinksItem.propTypes = {
    link: PropTypes.shape({
        source: PropTypes.shape({
            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
            label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired
        }).isRequired,
        target: PropTypes.shape({
            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
            label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired
        }).isRequired,
        color: PropTypes.string.isRequired,
        value: PropTypes.number.isRequired
    }).isRequired,

    path: PropTypes.string.isRequired,
    width: PropTypes.number.isRequired,
    color: PropTypes.string.isRequired,
    opacity: PropTypes.number.isRequired,
    contract: PropTypes.number.isRequired,

    theme: PropTypes.object.isRequired,

    // interactivity
    showTooltip: PropTypes.func.isRequired,
    hideTooltip: PropTypes.func.isRequired,
    setCurrent: PropTypes.func.isRequired,
    onClick: PropTypes.func.isRequired
};

var enhance = compose(withPropsOnChange(['link', 'theme', 'tooltip', 'tooltipFormat'], function (_ref3) {
    var link = _ref3.link,
        theme = _ref3.theme,
        tooltip = _ref3.tooltip,
        tooltipFormat = _ref3.tooltipFormat;

    if (tooltip) {
        return {
            tooltip: React.createElement(BasicTooltip, { id: tooltip(link), enableChip: false, theme: theme })
        };
    }
    return {
        tooltip: React.createElement(BasicTooltip, {
            id: React.createElement(TooltipContent, { format: tooltipFormat, link: link }),
            theme: theme
        })
    };
}), withPropsOnChange(['onClick', 'link'], function (_ref4) {
    var _onClick = _ref4.onClick,
        link = _ref4.link;
    return {
        onClick: function onClick(event) {
            return _onClick(link, event);
        }
    };
}), withHandlers({
    handleMouseEnter: function handleMouseEnter(_ref5) {
        var showTooltip = _ref5.showTooltip,
            setCurrent = _ref5.setCurrent,
            link = _ref5.link,
            tooltip = _ref5.tooltip;
        return function (e) {
            setCurrent(link);
            showTooltip(tooltip, e);
        };
    },
    handleMouseMove: function handleMouseMove(_ref6) {
        var showTooltip = _ref6.showTooltip,
            tooltip = _ref6.tooltip;
        return function (e) {
            showTooltip(tooltip, e);
        };
    },
    handleMouseLeave: function handleMouseLeave(_ref7) {
        var hideTooltip = _ref7.hideTooltip,
            setCurrent = _ref7.setCurrent;
        return function () {
            setCurrent(null);
            hideTooltip();
        };
    }
}), pure);

export default enhance(SankeyLinksItem);
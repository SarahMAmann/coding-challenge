var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * This file is part of the nivo project.
 *
 * Copyright 2016-present, RaphaÃ«l Benitte.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import React from 'react';
import PropTypes from 'prop-types';
import { motionPropTypes } from '../../../props';
import SmartMotion from '../../SmartMotion';
import BasicTooltip from '../../tooltip/BasicTooltip';

var StreamLayers = function StreamLayers(_ref) {
    var layers = _ref.layers,
        fillOpacity = _ref.fillOpacity,
        borderWidth = _ref.borderWidth,
        getBorderColor = _ref.getBorderColor,
        theme = _ref.theme,
        showTooltip = _ref.showTooltip,
        hideTooltip = _ref.hideTooltip,
        animate = _ref.animate,
        motionStiffness = _ref.motionStiffness,
        motionDamping = _ref.motionDamping;

    if (animate !== true) {
        return React.createElement(
            'g',
            null,
            layers.map(function (layer, i) {
                var id = layer.id,
                    path = layer.path,
                    color = layer.color;


                var handleTooltip = function handleTooltip(e) {
                    return showTooltip(React.createElement(BasicTooltip, { id: id, enableChip: true, color: color, theme: theme }), e);
                };

                return React.createElement('path', {
                    key: i,
                    onMouseMove: handleTooltip,
                    onMouseEnter: handleTooltip,
                    onMouseLeave: hideTooltip,
                    d: path,
                    fill: layer.fill ? layer.fill : layer.color,
                    fillOpacity: fillOpacity,
                    stroke: getBorderColor(layer),
                    strokeWidth: borderWidth
                });
            })
        );
    }

    var springConfig = {
        stiffness: motionStiffness,
        damping: motionDamping
    };

    return React.createElement(
        'g',
        null,
        layers.map(function (layer, i) {
            var id = layer.id,
                path = layer.path,
                color = layer.color;


            var handleTooltip = function handleTooltip(e) {
                return showTooltip(React.createElement(BasicTooltip, { id: id, enableChip: true, color: color, theme: theme }), e);
            };

            return React.createElement(
                SmartMotion,
                {
                    key: i,
                    style: function style(spring) {
                        return {
                            d: spring(path, springConfig),
                            fill: spring(color, springConfig),
                            fillOpacity: spring(fillOpacity, springConfig)
                        };
                    }
                },
                function (style) {
                    return React.createElement('path', _extends({
                        onMouseMove: handleTooltip,
                        onMouseEnter: handleTooltip,
                        onMouseLeave: hideTooltip
                    }, style, {
                        fill: layer.fill ? layer.fill : style.fill,
                        stroke: getBorderColor(layer),
                        strokeWidth: borderWidth
                    }));
                }
            );
        })
    );
};

StreamLayers.propTypes = _extends({
    fillOpacity: PropTypes.number.isRequired,
    borderWidth: PropTypes.number.isRequired,
    getBorderColor: PropTypes.func.isRequired,
    theme: PropTypes.object.isRequired

}, motionPropTypes);

export default StreamLayers;
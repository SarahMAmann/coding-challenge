/*
 * This file is part of the nivo project.
 *
 * Copyright 2016-present, RaphaÃ«l Benitte.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import React from 'react';
import { voronoi as VoronoiGenerator } from 'd3-voronoi';
import Container from '../Container';
import SvgWrapper from '../SvgWrapper';
import enhance from './enhance';
import { VoronoiPropTypes } from './props';

var Voronoi = function Voronoi(_ref) {
    var data = _ref.data,
        margin = _ref.margin,
        width = _ref.width,
        height = _ref.height,
        outerWidth = _ref.outerWidth,
        outerHeight = _ref.outerHeight,
        enableSites = _ref.enableSites,
        enableLinks = _ref.enableLinks,
        enablePolygons = _ref.enablePolygons,
        theme = _ref.theme,
        borderWidth = _ref.borderWidth,
        borderColor = _ref.borderColor,
        linkWidth = _ref.linkWidth,
        linkColor = _ref.linkColor,
        siteSize = _ref.siteSize,
        siteColor = _ref.siteColor;

    var voronoi = VoronoiGenerator().x(function (d) {
        return d.x;
    }).y(function (d) {
        return d.y;
    }).extent([[0, 0], [width, height]]);

    var polygons = voronoi.polygons(data);
    var links = voronoi.links(data);

    return React.createElement(
        Container,
        { isInteractive: false, theme: theme },
        function (_ref2) {
            var showTooltip = _ref2.showTooltip,
                hideTooltip = _ref2.hideTooltip;
            return React.createElement(
                SvgWrapper,
                { width: outerWidth, height: outerHeight, margin: margin },
                enableLinks && links.map(function (l) {
                    return React.createElement('line', {
                        key: l.source.id + '.' + l.target.id,
                        fill: 'none',
                        stroke: linkColor,
                        strokeWidth: linkWidth,
                        x1: l.source.x,
                        y1: l.source.y,
                        x2: l.target.x,
                        y2: l.target.y
                    });
                }),
                enablePolygons && polygons.map(function (p) {
                    return React.createElement('path', {
                        key: p.data.id,
                        fill: 'none',
                        stroke: borderColor,
                        strokeWidth: borderWidth,
                        d: 'M' + p.join('L') + 'Z',
                        onClick: function onClick() {
                            console.log(p.data);
                        }
                    });
                }),
                enableSites && data.map(function (d) {
                    return React.createElement('circle', {
                        key: d.id,
                        r: siteSize / 2,
                        cx: d.x,
                        cy: d.y,
                        fill: siteColor,
                        stroke: 'none'
                    });
                })
            );
        }
    );
};

Voronoi.propTypes = VoronoiPropTypes;

export default enhance(Voronoi);
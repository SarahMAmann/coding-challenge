var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * This file is part of the nivo project.
 *
 * Copyright 2016-present, RaphaÃ«l Benitte.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import React from 'react';
import PropTypes from 'prop-types';

var TreeMapNode = function TreeMapNode(_ref) {
    var style = _ref.style,
        node = _ref.node,
        handlers = _ref.handlers;

    if (style.width <= 0 || style.height <= 0) return null;

    var rotate = node.label && style.orientLabel && style.height > style.width;

    return React.createElement(
        'g',
        { transform: 'translate(' + style.x + ',' + style.y + ')' },
        React.createElement('rect', _extends({
            width: style.width,
            height: style.height,
            fill: style.fill ? style.fill : style.color,
            strokeWidth: style.borderWidth,
            stroke: style.borderColor
        }, handlers)),
        node.label && React.createElement(
            'text',
            {
                textAnchor: 'middle',
                alignmentBaseline: 'central',
                style: { fill: style.labelTextColor, pointerEvents: 'none' },
                transform: 'translate(' + style.width / 2 + ',' + style.height / 2 + ') rotate(' + (rotate ? -90 : 0) + ')'
            },
            node.label
        )
    );
};

TreeMapNode.propTypes = {
    node: PropTypes.object.isRequired,
    style: PropTypes.shape({
        x: PropTypes.number.isRequired,
        y: PropTypes.number.isRequired,
        width: PropTypes.number.isRequired,
        height: PropTypes.number.isRequired,
        color: PropTypes.string.isRequired,
        borderWidth: PropTypes.number.isRequired,
        borderColor: PropTypes.string.isRequired,
        labelTextColor: PropTypes.string.isRequired,
        orientLabel: PropTypes.bool.isRequired
    }).isRequired,
    handlers: PropTypes.object.isRequired
};

export default TreeMapNode;